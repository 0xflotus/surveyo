enum QuestionType {
    MultipleChoice
    CheckBoxes
    DropDown
    ShortAnswer
    Paragraph
}

type Question {
    id: ID!
    type: QuestionType!
    question: String!
    options: [String!]
    required: Bool!
    # sensitive is true for personal data. We may want to restrict read access to this. May be set it non-nullable as well
    sensitive: [Bool]
}

type Form {
    id: ID!
    questions: [Question!]
}


# Modeling form response schema.
# Method 1:
# Different form response type for each form type
# it will have name like FormResponse_<Form-id> . It will have fields like response_<question-id> <ResponseType> etc.
# This will be generated from code in the app when the user is creating the form.
# tricky part: Handling an edit to Form
type FormResponse_0 {
    
}


# alternative way to model responses in which we don't create a new form response type
# caveats handle types, required etc in our code
type FormResponse {
    id: ID!
    responses: [QuestionReponse]
}

type QuestionReponse {
    question_id: ID!
    string_response: String
    mcq_response: Int
    # etc. 
}